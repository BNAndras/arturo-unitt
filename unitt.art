

runTests: $[testPath :string][
    ;; description: « executes test-files inside the `testPath`
    ;;
    ;; arguments: [
    ;;      testPath: « the relative folder that contains the tests
    ;; ]
    ;;
    ;; example: {
    ;;      ; tester.art
    ;;      import {unitt}
    ;;      
    ;;      do ::
    ;;          runTests {tests}   
    ;; }

    ; Important to final statistics
    passed: 0
    failed: 0

    ; Important to return error code.
    ; If some test throw an error and don't explicitly catches it,
    ; this should not return 0 as error code, but 1, instead.
    fatalError: false

    isTestFile?: $[file :string][
        ;; description: « Checks if `file` starts with 'test' and is an .art file
        filename: last split.path file

        return and? 
            suffix? filename ".art" 
            prefix? filename "test"
    ]

    testfiles: list.recursive testPath | select => isTestFile?

    ; The tests execution
    loop testfiles 'file [ 
        print ~"\n===== |file| =====\n"

        result: execute.code ~"|sys\binary| |file|"
        output: split.lines result\output

        loop output 'line [
            print line
            if in? '✅' line -> inc 'passed
            if in? '❌' line -> inc 'failed
        ]

        ; if some test throws an error
        if result\code > 0 -> 
            fatalError: true

    ]

    print ~"\n===== Statistics =====\n"
    print ~"⏏️  TOTAL:  |passed + failed| assertions"
    print ~"✅ PASSED: |passed| assertions"
    print ~"❌ FAILED: |failed| assertions"
    print ~"\n===== ========== =====\n"

    if or? (fatalError) (failed > 0) 
        -> exit.with: 1

]

test: $[description :string testCase :block][

    assert: $[condition :block][

        sep: (attr 'prop)? -> "~" -> "-"
        template: ~"|sep| assert that |description|"

        passBlock: -> print [color #yellow ~"✅ |template|"]
        failBlock: -> print [color #yellow ~"❌ |template|"]

        (do condition)? 
            passBlock
            failBlock

        print ~"     assertion : |condition|\n"
    ]

    do testCase

]

