;; author: « RickBarretto
;; year: 2024
;; licence: « MIT
;; version: 0.1.1
;; repository: « https://github.com/RickBarretto/unitt
;;
;; warning: {
;;    Never import this as lean, or this will break the whole code.
;;    At least, for now. This may change in future updates.
;; }
;;
;; export: ['runTests 'test]

runTests: $[testPath :string][
    ;; description: « executes test-files inside the `testPath`
    ;;
    ;; arguments: [
    ;;      testPath: « the relative folder that contains the tests
    ;; ]
    ;; options: [
    ;;      failFast: :logical « fails on the first error found. (at file scope)
    ;;      pattern:  :string  « a simple glob-like pattern to select files.
    ;;      suppress: :logical « suppress exit codes.
    ;; ]
    ;;
    ;; example: {
    ;;      ; tester.art
    ;;      import {unitt}!
    ;;      
    ;;      runTests {tests}   
    ;; }

    ; Important to final statistics
    passed: 0
    failed: 0
    skipped: 0

    ; Important to return error code.
    ; If some test throw an error and don't explicitly catches it,
    ; this should not return 0 as error code, but 1, instead.
    fatalError: false
    failFast: logical? attr 'failFast

    pattern: (attr 'pattern)?? "test*.art"

    ensure.that: ~".pattern: '|pattern|' must have only one wildcard '*'."
        -> one? enumerate pattern 'ch -> ch = '*'

    testPrefix: first split.by: "*" pattern
    testSuffix: last  split.by: "*" pattern

    testFile?: $[file :string][
        ;; description: « Checks if `file` starts with 'test' and is an .art file

        filename: last split.path file

        and? 
            prefix? filename testPrefix
            suffix? filename testSuffix
    ]

    testfiles: list.recursive testPath | select => testFile?

    ; The tests execution
    loop testfiles 'file [ 
        print ~"\n===== |file| =====\n"

        result: execute.code ~"|sys\binary| |file|"
        output: split.lines result\output

        loop output 'line [
            print line
            if in? '✅' line -> inc 'passed
            if in? '❌' line -> inc 'failed
            if in? '⏩' line -> inc 'skipped
        ]

        ; if some test throws an error
        if result\code > 0 -> 
            fatalError: true

        if failFast -> if or? fatalError failed > 0 -> 
            break

    ]

    print ~"\n===== Statistics =====\n"
    print ~"⏏️    TOTAL: |passed + failed| assertions"
    print ~"✅  PASSED: |passed| assertions"
    print ~"⏩ SKIPPED: |skipped| assertions"
    print ~"❌  FAILED: |failed| assertions"
    print ~"\n===== ========== =====\n"

    exit?: not? attr? 'suppress
    failed?: or? (fatalError) (failed > 0)
    if and? exit? failed? 
        -> panic "Some tests failed!"

]

_unittTestsIndentation: ""

suite: $[description :string tests :block][
    ;; description: « Visually groups tests.
    ;;
    ;; arguments: [
    ;;      description: « the suite description
    ;;      test: « the block containing the tests statements
    ;; ]
    ;; options: [
    ;;      prop: :logical « defines if a test is property-based
    ;;      skip: :logical « skip test if true
    ;; ]
    ;;
    ;; example: {
    ;;      ; testAppend.art
    ;;      import {unitt}!
    ;;      
    ;;      suite "Groups some tests together" [
    ;;
    ;;          test.prop "appending with keyword or operator has the same behavior" [
    ;;              a: [a b c d e f g]
    ;;              b: [h i j k l m n]
    ;;              assert -> (append a b) = (a ++ b)
    ;;          ]
    ;;          
    ;;          test.skip: unix? "split is working for windows's paths" [
    ;;              assert -> ["." "splited" "path"] = split.path ".\\splited\\path"
    ;;          ]
    ;;      ]
    ;;      ; Suite: Groups some tests together
    ;;      ;
    ;;      ;     ✅ ~ assert that appending with keyword or operator has the same behavior 
    ;;      ;     assertion : [[append a b] = [a ++ b]]
    ;;      ;
    ;;      ;     ✅ - assert that split is working for windows's paths 
    ;;      ;     assertion : [[. splited path] = split path .\splited\path]
    ;; }
    print ["Suite:" description "\n"]
    _unittTestsIndentation: "    "
    do tests
    print ""
]


test: $[description :string testCase :block][
    ;; description: {
    ;;    Run an unit-test, printing it's result.
    ;;    Assertions should be done with the internal function `assert :block`.
    ;; }
    ;; arguments: [
    ;;      description: « the test description
    ;;      testCase: {
    ;;          the block containing the test's logic and assertion
    ;;      }
    ;; ]
    ;; options: [
    ;;      prop: :logical « defines if a test is property-based
    ;;      skip: :logical « skip test if true
    ;;      static: :block « defines what should not be evaluated when showing
    ;; ]
    ;;
    ;; note: {
    ;;    * `assert` is injected, and only available inside the `test`'s block.
    ;; }
    ;; 
    ;; example: {
    ;;      ; testAppend.art
    ;;      import {unitt}!
    ;;      
    ;;      test.prop "appending with keyword or operator has the same behavior" [
    ;;          a: [a b c d e f g]
    ;;          b: [h i j k l m n]
    ;;
    ;;          assert -> (append a b) = a ++ b
    ;;          assert -> (append b a) = b ++ a
    ;;      ]
    ;;      ; ✅ ~ assert that appending with keyword or operator has the same behavior 
    ;;      ;      assertion : ( append [a b c d e f g] [h i j k l m n] ) = [a b c d e f g] ++ [h i j k l m n]
    ;;      ;
    ;;      ; ✅ ~ assert that appending with keyword or operator has the same behavior
    ;;      ;      assertion : ( append [h i j k l m n] [a b c d e f g] ) = [h i j k l m n] ++ [a b c d e f g]
    ;;          
    ;;      test.skip: unix? "split is working for windows's paths" [
    ;;          assert -> ["." "splited" "path"] = split.path ".\\splited\\path"
    ;;      ]
    ;;      ; # running on Windows:
    ;;      ; ✅ - assert that split is working for windows's paths
    ;;      ;      assertion : ["." "splited" "path"] = split .path ".\\splited\\path"
    ;;      ; 
    ;;      ; # running on Unix:
    ;;      ; ⏩ - assert that split is working for windows's paths 
    ;;      
    ;;      test.static: [a] "`a` won't be evaluated" [
    ;;          assert -> a = 5 
    ;;      ]
    ;;      ; ✅ - assert that `a` won't be evaluated 
    ;;      ;      assertion : a = 5
    ;;
    ;; }

    sep: (attr 'prop)? -> "~" -> "-"
    template: ~"|sep| assert that |description|"

    skip?: attr 'skip

    assert: $[condition :block][

        statics: (attr 'static) ?? []
        forceStatic?: statics = true

        passBlock: -> print [color #yellow ~"|_unittTestsIndentation|✅ |template|"]
        failBlock: -> print [color #yellow ~"|_unittTestsIndentation|❌ |template|"]
        skipBlock: [ 
            print [color #yellow ~"|_unittTestsIndentation|⏩ |template|"]
            print ~"|_unittTestsIndentation|     skipped! \n"
        ]

        evaluateExpression: $[expr][
            statics: statics
            staticTypes: [:function :literal :pathLiteral]
            staticPrinting: [
                    prints " "
                    prints value
                    continue
                ]
            
            loop expr 'value [                
                if inline? value  [
                    _: evaluateExpression to :inline value
                    continue
                ]

                if or? throws? [val: var value] in? value statics
                    staticPrinting

                if in? type val staticTypes 
                    staticPrinting
                
                prints " "
                prints as.code val
            ]

            return null

        ]

        if skip? [
            do skipBlock
            return null
        ]

        (equal? @condition @[true])? 
            passBlock
            failBlock

        prints ~"|_unittTestsIndentation|     assertion:"
        
        (forceStatic?)? [
            prints " "
            prints -> condition
        ][
            evaluateExpression condition
        ]
        print "\n"

    ]

    do testCase

]

