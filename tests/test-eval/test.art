#! arturo

import {unitt}!

suite "Simple tests with :inline and :block" [

    a: [a b c d e f g]
    b: [h i j k l m n]

    test.prop "works recursively for :inline" [
        assert -> (append a b) = a ++ b
        assert -> (append b a) = b ++ a
    ]

    test.prop "`append a b` is evaluated before-hand" [
        ab: append a b
        assert -> ab = a ++ b
    ]

    test.prop.static: [ab] "considers `ab` as being static" [
        ab: append a b
        assert -> ab = a ++ b
    ]

    test.prop.static: [a b ab] "considers everything as being static" [
        ab: append a b
        assert -> ab = a ++ b
    ]

]

suite "Test pre-evaluation" [

    a: to :inline -> (sum [2 3 4])
    b: [1 2 3 4 5]

    test.prop "is possible to evaluate before-hand with `@`" [
        assert [a b]
        assert @[a b]
        assert @[@ to :block a b]
    ]

    test.prop.static: [a b] "`a` and `b` are considered static" [
        assert [a = b]
    ]

    test.prop.static: [a b] "[] and -> are evaluated differently" [
        assert [(a = b)]    ; static evaluated
        assert -> (a = b)   ; evaluated before-hand
    ]

    test.prop.static: [a b] "`a` and `b` are evaluated before-hand" [
        assert @[a = b]
    ]

]


suite "Test completely static display" [

    a: to :inline -> (sum [2 3 4])
    b: [1 2 3 4 5]

    test.prop.static "`a` and `b` are considered static" [
        assert [a = b]
    ]

    test.prop.static "[] and -> are evaluated differently" [
        assert [(a = b)]    ; static evaluated
        assert -> (a = b)   ; evaluated before-hand
    ]

    test.prop.static "`a` and `b` is evaluated before-hand" [
        assert @[a = b]
    ]

]