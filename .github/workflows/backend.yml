name: Cross Compile and Upload Artifacts

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:
  linux-windows-build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - i686-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
          - x86_64-pc-windows-gnu

    steps:
      - uses: actions/checkout@v4

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Get crate metadata
        id: meta
        run: |
          META=$(cargo metadata --manifest-path unitt/Cargo.toml --format-version 1 --no-deps)
          NAME=$(echo "$META" | jq -r '.packages[0].name')
          VERSION=$(echo "$META" | jq -r '.packages[0].version')
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross --force

      - name: Build with cross
        run: cross build --release --target ${{ matrix.target }} --manifest-path unitt/Cargo.toml

      - name: Compute artifact name
        id: tag
        run: |
          TARGET=${{ matrix.target }}
          ARCH=""
          OS=""
          case "$TARGET" in
            *x86_64*linux*)  ARCH="amd64"; OS="linux" ;;
            *aarch64*linux*) ARCH="arm64"; OS="linux" ;;
            *i686*linux*)    ARCH="x86";   OS="linux" ;;
            *armv7*linux*)   ARCH="arm32"; OS="linux" ;;
            *x86_64*windows*) ARCH="amd64"; OS="windows" ;;
            *) echo "Unknown target $TARGET"; exit 1 ;;
          esac
          echo "os=$OS" >> $GITHUB_OUTPUT
          echo "arch=$ARCH" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.meta.outputs.name }}-${{ steps.meta.outputs.version }}-${{ steps.tag.outputs.os }}-${{ steps.tag.outputs.arch }}
          path: target/${{ matrix.target }}/release/${{ steps.meta.outputs.name }}*

  macos-build:
    runs-on: macos-latest

    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v4

      - name: Install tools
        run: |
          rustup target add ${{ matrix.target }}
          brew install jq || true

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/.cargo/registry
            ~/Library/Caches/.cargo/git
          key: macos-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            macos-cargo-

      - name: Get crate metadata
        id: meta
        run: |
          META=$(cargo metadata --manifest-path unitt/Cargo.toml --format-version 1 --no-deps)
          NAME=$(echo "$META" | jq -r '.packages[0].name')
          VERSION=$(echo "$META" | jq -r '.packages[0].version')
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Compute artifact name
        id: tag
        run: |
          TARGET=${{ matrix.target }}
          if [[ "$TARGET" == "x86_64-apple-darwin" ]]; then
            ARCH="intel"
          elif [[ "$TARGET" == "aarch64-apple-darwin" ]]; then
            ARCH="silicon"
          else
            ARCH="unknown"
          fi
          echo "os=macos" >> $GITHUB_OUTPUT
          echo "arch=$ARCH" >> $GITHUB_OUTPUT

      - name: Build
        run: cargo build --release --target ${{ matrix.target }} --manifest-path unitt/Cargo.toml

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.meta.outputs.name }}-${{ steps.meta.outputs.version }}-${{ steps.tag.outputs.os }}-${{ steps.tag.outputs.arch }}
          path: target/${{ matrix.target }}/release/${{ steps.meta.outputs.name }}*

  windows-arm64-build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install tools
        run: |
          rustup target add aarch64-pc-windows-msvc
          choco install jq -y

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~\.cargo\registry
            ~\.cargo\git
          key: windows-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            windows-cargo-

      - name: Get crate metadata
        id: meta
        run: |
          $meta = cargo metadata --manifest-path unitt/Cargo.toml --format-version 1 --no-deps | ConvertFrom-Json
          echo "name=$($meta.packages[0].name)" >> $env:GITHUB_OUTPUT
          echo "version=$($meta.packages[0].version)" >> $env:GITHUB_OUTPUT

      - name: Build
        run: cargo build --release --target aarch64-pc-windows-msvc --manifest-path unitt/Cargo.toml

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.meta.outputs.name }}-${{ steps.meta.outputs.version }}-windows-arm64
          path: target/aarch64-pc-windows-msvc/release/${{ steps.meta.outputs.name }}*
