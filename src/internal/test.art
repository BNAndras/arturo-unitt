import ./{format}!
import ./{assert}!

define :test [

    init: method [description :string assertions :block][
        \skip?: empty? assertions
        \sep: (attr 'prop)? -> "~" -> "-"

        \description: description
        \assertions: assertions
    ]

    status: method [][
        if \skip? -> return 'skipped
        
        succeeded?: \assertions
            | map 'assertion [to :logical assertion]
            | all?

        switch succeeded? -> 'passed -> 'failed
    ]

    symbol: method [][
        get #[
            skipped: "⏩"
            passed: "✅"
            failed: "❌"
        ] \status
    ]

    header: method [][
        color #yellow format \symbol ~"|\sep| assert that |\description|"
    ]

    string: method[][
        join.with: "\n" flatten  @[
            ident \header
            switch \skip? 
                -> color #blue ident.extra ~"skipped!"
                -> map \assertions [assertion] [
                    ident.extra to :string assertion
                ]
            ""
        ]
    ]

    add: method.public.distinct [assertion :assertion][
        append 'this\assertions assertion 
    ]

]

it: $[description :string testCase :block][
    ;; description: {
    ;;    Run an unit-test, printing it's result.
    ;;    Assertions should be done with the internal function `expects :block`.
    ;; }
    ;; arguments: [
    ;;      description: « the test description
    ;;      testCase: {
    ;;          the block containing the test's logic and assertion
    ;;      }
    ;; ]
    ;; options: [
    ;;      prop: :logical « defines if a test is property-based
    ;;      skip: :logical « skip test if true
    ;; ]
    ;;
    ;; note: {
    ;;    * `expects`/`assert` is injected, and only available inside the `it`'s block.
    ;; }
    ;; 
    ;; example: {
    ;;      ; testAppend.art
    ;;      import {unitt}!
    ;;      
    ;;      it.prop "appending with keyword or operator has the same behavior" [
    ;;          a: [a b c d e f g]
    ;;          b: [h i j k l m n]
    ;;
    ;;          expects.be: 'equal? @[express append a b express a ++ b]
    ;;          expects.be: 'equal? @[express append b a express b ++ a]
    ;;      ]
    ;;      ; ✅ ~ assert that appending with keyword or operator has the same behavior 
    ;;      ;      ✅: equal? [a b c d e f g h i j k l m n] [a b c d e f g h i j k l m n]
    ;;      ;
    ;;      ; ✅ ~ assert that appending with keyword or operator has the same behavior
    ;;      ;      ✅: equal? [h i j k l m n a b c d e f g] [h i j k l m n a b c d e f g]
    ;;          
    ;;      it.skip: unix? "split is working for windows's paths" [
    ;;          expects.be: 'equal? ["." "splited" "path"] = split.path ".\\splited\\path"
    ;;      ]
    ;;      ; # running on Windows:
    ;;      ; ✅ - assert that split is working for windows's paths
    ;;      ;      ✅: equal? ["." "splited" "path"] ["." "splited" "path"]
    ;;      ; 
    ;;      ; # running on Unix:
    ;;      ; ⏩ - assert that split is working for windows's paths 
    ;;      ;      skipped!
    ;;      
    ;;      it "`a` won't be evaluated" [
    ;;          expects.static -> a = 5 
    ;;      ]
    ;;      ; ✅ - assert that `a` won't be evaluated 
    ;;      ;      ✅: a = 5
    ;;
    ;; }

    if attr 'skip -> testCase: []

    __assertions: @[]
    expects: $[condition :block][
        __fn: @[attr 'with attr 'to attr 'be ] | filter => null?
        if not? empty? __fn
            -> condition: 
                prepend condition @[to :word last __fn]
        
        '__assertions ++ to :assertion @[condition]
    ]

    assert: var 'expects

    do testCase
    _self: to :test @[description __assertions]
    print to :string _self
    'unitt ++ _self
]

test: var 'it