import ./{format}!

test: $[description :string testCase :block][
    ;; description: {
    ;;    Run an unit-test, printing it's result.
    ;;    Assertions should be done with the internal function `assert :block`.
    ;; }
    ;; arguments: [
    ;;      description: « the test description
    ;;      testCase: {
    ;;          the block containing the test's logic and assertion
    ;;      }
    ;; ]
    ;; options: [
    ;;      prop: :logical « defines if a test is property-based
    ;;      skip: :logical « skip test if true
    ;;      static: :block « defines what should not be evaluated when showing
    ;;      static: :logical « disables runtime eval, forces static display
    ;; ]
    ;;
    ;; note: {
    ;;    * `assert` is injected, and only available inside the `test`'s block.
    ;; }
    ;; 
    ;; example: {
    ;;      ; testAppend.art
    ;;      import {unitt}!
    ;;      
    ;;      test.prop "appending with keyword or operator has the same behavior" [
    ;;          a: [a b c d e f g]
    ;;          b: [h i j k l m n]
    ;;
    ;;          assert -> (append a b) = a ++ b
    ;;          assert -> (append b a) = b ++ a
    ;;      ]
    ;;      ; ✅ ~ assert that appending with keyword or operator has the same behavior 
    ;;      ;      assertion: append [a b c d e f g] [h i j k l m n] = [a b c d e f g] ++ [h i j k l m n]
    ;;      ;
    ;;      ; ✅ ~ assert that appending with keyword or operator has the same behavior
    ;;      ;      assertion: append [h i j k l m n] [a b c d e f g] = [h i j k l m n] ++ [a b c d e f g]
    ;;          
    ;;      test.skip: unix? "split is working for windows's paths" [
    ;;          assert -> ["." "splited" "path"] = split.path ".\\splited\\path"
    ;;      ]
    ;;      ; # running on Windows:
    ;;      ; ✅ - assert that split is working for windows's paths
    ;;      ;      assertion: . splited path  = split path .\splited\path
    ;;      ; 
    ;;      ; # running on Unix:
    ;;      ; ⏩ - assert that split is working for windows's paths 
    ;;      
    ;;      test.static: [a] "`a` won't be evaluated" [
    ;;          assert -> a = 5 
    ;;      ]
    ;;      ; ✅ - assert that `a` won't be evaluated 
    ;;      ;      assertion : a = 5
    ;;
    ;; }

    __display: $[status][
        __sep: (attr 'prop)? -> "~" -> "-"
        format status ~"|__sep| assert that |description|"
    ]

    if attr 'skip [
        print ident __display "⏩"
        print ident.extra ~"skipped!"
        print ""
        return null
    ]

    do ./"assert.art"

    ;; typed [:assertions]
    __assertions: @[]
    do testCase

    succeeded?: __assertions
        | map 'assertion [to :logical assertion]
        | all?

    switch succeeded?
        -> print ident __display "✅"
        -> print ident __display "❌"
    
    loop __assertions [assertion] [
        print ident.extra to :string assertion
    ]
]