
describe: $[description :string tests :block][
    ;; description: « Visually groups tests.
    ;;
    ;; arguments: [
    ;;      description: « the suite description
    ;;      test: « the block containing the tests statements
    ;; ]
    ;; options: [
    ;;      prop: :logical « defines if a test is property-based
    ;;      skip: :logical « skip test if true
    ;; ]
    ;;
    ;; example: {
    ;;      ; testAppend.art
    ;;      import {unitt}!
    ;;      
    ;;      unix?: true
    ;;      describe "Groups some tests together" [
    ;;
    ;;          test.prop "appending with keyword or operator has the same behavior" [
    ;;              a: [a b c d e f g]
    ;;              b: [h i j k l m n]
    ;;              assert.with: 'equal? @[express append a b express a ++ b]
    ;;          ]
    ;;          
    ;;          test.skip: unix? "split is working for windows's paths" [
    ;;              assert.with: 'equal? @[["." "splited" "path"] split.path ".\\splited\\path"]
    ;;          ]
    ;;      ]
    ;;      ; Description: Groups some tests together 
    ;;      ;
    ;;      ; ✅ - assert that appending with keyword or operator has the same behavior
    ;;      ;      ✅: equal? [a b c d e f g h i j k l m n] [a b c d e f g h i j k l m n]
    ;;      ;
    ;;      ; ⏩ - assert that split is working for windows's paths
    ;;      ;      skipped!
    ;; }
    print ["Description:" description "\n"]
    _unittTestsIndentation: "    "
    do tests
    print ""
]

suite: var 'describe