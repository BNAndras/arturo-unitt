_repr: $[tokens][
    ignorable: [:function :literal :pathLiteral]
    reprToken: $[token :any][
        if inline? token            ; :inline should be 
            -> return _repr token   ; recursively evaluated

        if contains? ignorable type token
            -> return as.code token

        switch throws? [value: var token]
            -> as.code token
            -> as.code value
    ]

    tokens | map => [reprToken &] 
           | join.with: " "
]

define :assertion [
    init: method [condition :block][
        \_condition: condition
        \_status: equal? @condition @[true]
    ]

    string: method [][
        repr: switch attr 'static
            -> as.code \_condition  
            -> _repr \_condition

        ~"assertion: |repr|"
    ]

    logical: method [][
        \_status
    ]
]

assert: $[condition :block][
    assertion: to :assertion @[condition]
    append '__assertions assertion
]