_repr: $[tokens][
    ignorable: [
        :function 
        :literal 
        :pathLiteral 
        :method 
        :object
        :symbol
    ]
    reprToken: $[token :any][
        if inline? token            ; :inline should be 
            -> return _repr token   ; recursively evaluated

        if contains? [:string :literal :pathLiteral :symbolLiteral] type token 
            -> return as.code token

        if throws? [value: var token]
            -> return token

        switch in? (type var token) ignorable
            -> token
            -> as.code value
    ]

    tokens | map => [reprToken &] 
           | join.with: " "
]

define :assertion [
    init: method [condition][
        \_condition: condition
        \_status: equal? @condition @[true]
        \_static: attr 'static
    ]

    string: method [][
        repr: switch \_static
            -> as.code \_condition  
            -> _repr \_condition

        switch \_status
            -> color #green ~"✅: |repr|"
            -> color #red   ~"❌: |repr|"
    ]

    logical: method [][
        \_status
    ]
]